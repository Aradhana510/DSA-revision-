Problem Description

Given a binary tree, return a 2-D array with vertical order traversal of it. Go through the example and image for more details.


NOTE: If 2 Tree Nodes shares the same vertical level then the one with lesser depth will come first.



Problem Constraints

0 <= number of nodes <= 105



Input Format

First and only arument is a pointer to the root node of binary tree, A.



Output Format

Return a 2D array denoting the vertical order traversal of tree as shown.



Example Input

Input 1:

      6
    /   \
   3     7
  / \     \
 2   5     9
Input 2:

      1
    /   \
   3     7
  /       \
 2         9


Example Output

Output 1:

 [
    [2],
    [3],
    [6, 5],
    [7],
    [9]
 ]
Output 2:

 [
    [2],
    [3],
    [1],
    [7],
    [9]
 ]


Example Explanation

Explanation 1:

 First row represent the verical line 1 and so on.

SOLUTION

import collections
# Definition for a  binary tree node
# class TreeNode:
#   def __init__(self, x):
#       self.val = x
#       self.left = None
#       self.right = None

class Solution:
    # @param A : root node of tree
    # @return a list of list of integers
    def verticalOrderTraversal(self, A):
        que = collections.deque([ { "node":A, "dist":0 } ])
        hm = { 0 : [A.val] }
        mi = 0
        mx = 0
        while que:
            node = que[0]["node"]
            dist = que[0]["dist"]
            que.popleft()

            if node.left:
                if dist-1 in hm.keys():
                    hm[dist-1].append(node.left.val)
                else:
                    hm[dist-1] = [node.left.val]

                que.append({"node":node.left, "dist": dist-1})
                mi = min(mi, dist-1)
           
            if node.right:
                if dist+1 in hm.keys():
                    hm[dist+1].append(node.right.val)
                else:
                    hm[dist+1] =  [node.right.val]

                que.append({"node":node.right, "dist": dist+1})
                mx = max(mx, dist+1)
        ans = []
        for i in range(mi, mx+1):
            ans.append(hm[i])
       
        return ans
