Problem Description
Farmer John has built a new long barn with N stalls. Given an array of integers A of size N where each element of the array represents the location of the stall and an integer B which represents the number of cows.

His cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, John wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?



Problem Constraints
2 <= N <= 100000
0 <= A[i] <= 109
2 <= B <= N



Input Format
The first argument given is the integer array A.
The second argument given is the integer B.



Output Format
Return the largest minimum distance possible among the cows.



Example Input
Input 1:

A = [1, 2, 3, 4, 5]
B = 3
Input 2:

A = [1, 2]
B = 2


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 John can assign the stalls at location 1, 3 and 5 to the 3 cows respectively. So the minimum distance will be 2.
Explanation 2:

 The minimum distance will be 1.

SOLUTION

  class Solution:
    # Function to check if it is possible to assign B cows with minimum distance at least mid
    def is_possible(self, A, B, mid):
        cows = 1  # Initialize cows to 1 since we'll place the first cow at A[0]
        prev_pos = A[0]
        n = len(A)
        
        for i in range(1, n):
            if A[i] - prev_pos >= mid:
                cows += 1
                prev_pos = A[i]
        
        return cows >= B
    
    def solve(self, A, B):
        A.sort()  # Sort the array of stalls
        
        # Initialize binary search boundaries
        low, high = 0, A[-1] - A[0]
        result = 0
        
        # Binary search to find the largest minimum distance
        while low <= high:
            mid = (low + high) // 2
            
            if self.is_possible(A, B, mid):
                result = mid  # Update the result if it's possible with current mid
                low = mid + 1  # Move towards larger distances
            else:
                high = mid - 1  # Move towards smaller distances
        
        return result
