Problem Description

Given an integer A, how many structurally unique BST's (binary search trees) exist that can store values 1...A?



Problem Constraints

1 <= A <=18



Input Format

First and only argument is the integer A



Output Format

Return a single integer, the answer to the problem



Example Input

Input 1:

 1
Input 2:

 2


Example Output

Output 1:

 1
Output 2:

 2


Example Explanation

Explanation 1:

 Only single node tree is possible.
Explanation 2:

 2 trees are possible, one rooted at 1 and other rooted at 2.

SOLUTION

class Solution:
    # @param A : integer
    # @return an integer
    def numTrees(self, A):
        if A == 0:
            return 1
        if A == 1:
            return 1
        
        # Initialize the DP array
        dp = [0] * (A + 1)
        dp[0] = 1
        dp[1] = 1
        
        # Fill the DP array
        for n in range(2, A + 1):
            for j in range(1, n + 1):
                dp[n] += dp[j - 1] * dp[n - j]
        
        return dp[A]
