Problem Description

Given a string A denoting an expression. It contains the following operators '+', '-', '*', '/'.


Check whether A has redundant braces or not.

NOTE: A will be always a valid expression and will not contain any white spaces.



Problem Constraints

1 <= |A| <= 105



Input Format

The only argument given is string A.



Output Format

Return 1 if A has redundant braces else, return 0.



Example Input

Input 1:


 A = "((a+b))"
Input 2:

 A = "(a+(a+b))"






Example Output

Output 1:


 1
Output 2:

 0



Example Explanation

Explanation 1:


 ((a+b)) has redundant braces so answer will be 1.
Explanation 2:

 (a+(a+b)) doesn't have have any redundant braces so answer will be 0.


SOLUTION

class Solution:
    # @param A : string
    # @return an integer
    def braces(self, A):
        #approach if a pair of bracket have expression in between then it is not a redundant else it is redundant
        #loop through array
                #a)append the open bracket and arithmetic symbols into stack
                #b)if you encounter a close bracket check whether the previous stack value is expression if it is
                   # open bracket return 1
                   #b1)else pop all elements from stack until and including (
        # return 0 if nothing return 1
        stack=[]
        for i in range(len(A)):
            if(A[i]=='(' or A[i]=='+' or A[i]=='-' or A[i]=='*' or A[i]=='/'):
                stack.append(A[i])
            elif(A[i]==')'):
                if(stack[-1]=='('):
                    return 1
                while(len(stack)>0 and stack[-1]!='('):
                    stack.pop()
                stack.pop()
        return 0
